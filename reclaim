#!/bin/sh


if test -z $RECLAIM_PREFIX
then
  RECLAIM_PREFIX=`pwd`
fi

if ! test -d $RECLAIM_PREFIX
then
  echo "$RECLAIM_PREFIX does not exist!"
  exit 1
fi

CLIENT_PREFIX="$RECLAIM_PREFIX/client"

if ! test -d $CLIENT_PREFIX
then
  echo "$CLIENT_PREFIX does not exist!"
  exit 1
fi

cd $CLIENT_PREFIX

mkdir -p ".tmp"

PROD="reclaim"

RED='\033[0;31m'
GREEN='\033[0;32m'
REC='\033[1;34m'
NC='\033[0m'
NO_PULL=0
DEMO_ENABLED=0
COMPOSEFILE="$CLIENT_PREFIX/config/docker-compose.yml"
CUSTOM_COMPOSEFILE=0
ACTION="none"
NOARG=1
SECRET_LENGTH=32
OIDC_CMD=""
export LC_ALL=C
export YES_TO_ALL=0
export NO_TO_ALL=0

# prevent warnings
export PSW_SECRET=0
export JWT_SECRET=0

parse_opt() {
    while [[ $# -gt 0 ]]
    do
        NOARG=0
        key="$1"
        case $key in
            --no-pull)
                NO_PULL=1
                `touch .tmp/no_pull`
                shift
                ;;
            -d|--demo)
                DEMO_ENABLED=1
                COMPOSEFILE="config/docker-compose_demo.yml"
                shift
                ;;
            -f|--compose-file)
                COMPOSEFILE="$2"
                CUSTOM_COMPOSEFILE=1
                shift
                shift
                ;;
            start)
                ACTION="start"
                shift
                ;;
            stop)
                ACTION="stop"
                shift
                ;;
            purge)
                ACTION="purge"
                shift
                ;;
            restart)
                ACTION="restart"
                shift
                ;;
            oidc)
                ACTION="oidc"
                shift
                OIDC_CMD="$*"
                break
                ;;
            -y|--yes-to-all)
                export YES_TO_ALL=1
                shift
                ;;
            -n|--no-to-all)
                export NO_TO_ALL=1
                shift
                ;;
            *)
                reclaim_banner
                echo -e "${RED}Unknown argument:${NC} $key\n"
                reclaim_usage
                exit 1
                shift
                ;;
        esac
    done

    if [[ $CUSTOM_COMPOSEFILE = 1 && $DEMO_ENABLED = 1 ]];
    then
        echo -e "${RED}WARNING: demo was enabled and custom Dockerfile set. This is currently NOT supported."
        echo -e "Not starting demo, then.${NC}"
    fi

    if [ $YES_TO_ALL = 1 ] && [ $NO_TO_ALL = 1 ]
    then
         echo -e "${RED}ERROR: flags -n and -y are exclusive.${NC}"
         exit 1
     fi

}

stop_reclaim() {
    echo "Shutting down $PROD"
    if [ -f .tmp/composefile ]
    then
        COMPOSEFILE=`cat .tmp/composefile`
    fi

    docker-compose -f $COMPOSEFILE down

    echo -e "reclaim stopped.\n"
}

start_reclaim() {
    echo "Starting $PROD..."
    # check whether cert has already been generated
    if ! docker run --rm -v reclaim-gnunet:/volume alpine ls /volume/gns/gns_ca_cert.pem &> /dev/null
    then
        echo ""
        echo "No CA cert found. Generating..."
        if [ -f ./bin/generate-ca ]
        then
            ./bin/generate-ca
        else
            echo "Error... CA helper not found!"
            exit 1
        fi
    else
        echo "gns certificate has already been added"
    fi

    # has user given preferences? always override
    if [[ $CUSTOM_COMPOSEFILE = 1 || $DEMO_ENABLED = 1 ]]
    then
        # store info about docker-compose file
        echo $COMPOSEFILE > .tmp/composefile
    else
        # try to read an existing starting configuration
        if [ -f .tmp/composefile ]
        then
            COMPOSEFILE=`cat .tmp/composefile`
        fi
    fi

    if [[ 1 = $NO_PULL ]]
    then
        echo "Not pulling images from Docker Hub"
    else
        docker-compose -f $COMPOSEFILE pull
    fi

    # TODO: provide user with an option for supplying custom pws

    # check whether passwords have already been generated
    if [ -f .tmp/psw_secret ]
    then
        export PSW_SECRET=$(cat .tmp/psw_secret)
    else
        export PSW_SECRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $SECRET_LENGTH | head -1)
        echo "$PSW_SECRET" > .tmp/psw_secret
    fi

    if [ -f .tmp/jwt_secret ]
    then
        export JWT_SECRET=$(cat .tmp/jwt_secret)
    else
        export JWT_SECRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $SECRET_LENGTH | head -1)
        echo "$JWT_SECRET" > .tmp/jwt_secret
    fi

    docker-compose -f $COMPOSEFILE up -d

    echo -e "started.\n"
}

restart_reclaim() {
    reclaim_banner
    stop_reclaim
    start_reclaim
    reclaim_status
}

purge_reclaim() {
    reclaim_banner
    echo "Purging $PROD"

    if [ -f .tmp/composefile ]
    then
        COMPOSEFILE=`cat .tmp/composefile`
        rm -rf .tmp
    fi

    if ! [ 1 = $YES_TO_ALL ] && [ 0 = $NO_TO_ALL ]
    then
        echo "Do you also want to remove the named volumes (persistent data)?"
        echo -n "(Y/n) "
        read input
    fi
    if ( [[ $input = "Y" ]] || [ 1 = $YES_TO_ALL ] ) && [ 0 = $NO_TO_ALL ]
    then
        echo "removing named volumes"
        #docker volume rm reclaim-gnunet || true
        #docker volume rm reclaim-reclaim || true
        docker-compose -f $COMPOSEFILE down --remove --volumes
    else
        echo "not removing named volumes"
        docker-compose -f $COMPOSEFILE down --remove
    fi
    reclaim_status
}

reclaim_banner() {
    echo -e "${REC}                     __      _         "
    echo "   ________  _ _____/ /___ _(_)___ ___ "
    echo '  / ___/ _ \(_) ___/ / __ `/ / __ `__ \'
    echo " / /  /  __/ / /__/ / /_/ / / / / / / /"
    echo "/_/   \___(_)\___/_/\__,_/_/_/ /_/ /_/ "
    echo -e "                                       ${NC}"
    echo "https://reclaim-identity.io"
    echo "(C) 2018 Fraunhofer AISEC"
    echo ""
}

reclaim_status() {
    echo "Status:"
    if [ -z `docker ps -q --no-trunc | grep $(docker-compose -f config/docker-compose.yml ps -q reclaim-runtime) 2>/dev/null` ]; then
        echo -e "${RED}\xE2\x9D\x8C Service is not running.${NC}"
    else
        echo -e "${GREEN}\xE2\x9C\x94 Service is running.${NC}"
    fi

    if [ -z `docker ps -q --no-trunc | grep $(docker-compose -f config/docker-compose.yml ps -q reclaim-ui) 2>/dev/null` ]; then
        echo -e "${RED}\xE2\x9D\x8C UI is not running.${NC}"
    else
        echo -e "${GREEN}\xE2\x9C\x94 UI is running.${NC}"
    fi
    echo ""
}

reclaim_usage() {
    echo "Usage:"
    echo "$0 start: starts $PROD"
    echo "$0 stop: shuts $PROD down"
    echo "$0 restart: restarts $PROD"
    echo "$0 purge: shuts $PROD down and purges its data"
    echo "the --no-pull (-n) flag can be used to prevent pulling images from remote"
    echo "the --demo (-d) flag can be used to start a demo relying party"
    echo "the --compose-file (-f) flag can be used to specify a custom docker-compose.yml"
}

reclaim_full() {
    reclaim_banner
    reclaim_status
    reclaim_usage
}

oidc_help() {
    # TODO: show help
    echo "not implemented"
}

oidc() {
    OIDC_ACTION="none"
    URI=""
    while [[ $# -gt 0 ]]
    do
        key="$1"
        case $key in
            createClient)
                OIDC_ACTION="create"
                shift
                ;;
            listClients)
                OIDC_ACTION="list"
                shift
                ;;
            deleteClient)
                OIDC_ACTION="delete"
                shift
                ;;
            --uri)
                URI=$2
                shift
                shift
                ;;
            *)
                echo "unknown key: $1"
                shift
                ;;
        esac
    done

    case $OIDC_ACTION in
        none)
            ;;
        create)
            echo "creating client"
            docker exec reclaim-runtime create_client --uri $URI
            ;;
        list)
            echo "listing clients"
            docker exec reclaim-runtime list_clients
            ;;
        delete)
            echo "deleting client"
            docker exec reclaim-runtime list_clients --uri $URI
            ;;
    esac
}

parse_opt "$@"

if [ -f .tmp/no_pull ]
    then
    NO_PULL=1
fi

case $ACTION in
    none)
        ;;
    start)
        start_reclaim
        ;;
    stop)
        stop_reclaim
        ;;
    restart)
        restart_reclaim
        ;;
    purge)
        purge_reclaim
        ;;
    oidc)
        oidc $OIDC_CMD
        ;;
    *)
        echo "${RED}Unregistered Action. This should not happen.${NC}"
        exit 1
        ;;
esac

if [ $NOARG = 1 ]
then
    reclaim_full
fi

